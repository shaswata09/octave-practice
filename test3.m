clcclearA = [1 2; 3 4; 5 6]B = [11 12; 13 14; 15 16]C = [1 1; 2 2]printf("\nA*C Multiplying two matrices...\n")A*Cprintf("\nA .* B Element wise multiplication...\n")A .* Bprintf("\nA .^2 Element wise squaring...\n")A .^2printf("\nA' gives transpose of A...\n")A'V = [1; 2; 3]printf("\n1 ./ V Element wise reciprocal...\n")1 ./ Vprintf("\nlog(V) gives logarithm of V...\n")log(V)printf("\nexp(V) gives exponent of V...\n")exp(V)printf("\n-V or -1*V gives negative of V...\n")-Vprintf("\nabs([-1;2;-3]) gives absolute value of argument value...\n")abs([-1;2;-3])% Some complex operationsprintf("\nV+ones(length(V),1) or V+1 increments V by 1...\n")V+ones(length(V),1)a = [1 2 12 0.5] % This is a 1X4 vectorprintf("\nmax(a) returns the maximum element in the vector...\n")max(a)printf("\n[val, ind] = max(a) returns the max element in val and it's index at ind...\n")[val, ind]= max(a)printf("\na<3 returns vector elements whose values less than 3...\n")a<3printf("\nfind(a<3) returns indices whose values are less than 3...\n")find(a<3)printf("\nmagic(3) returns a magic matrix of diamention 3X3...\n")M = magic(3)printf("\n[r, c] = find(M>=7) stores (r,c) components of M whose value is >= 7...\n")[r, c] = find(M>=7)printf("\nM(r(2),c(2)) -> M(3,2):\n")M(r(2),c(2))printf("\n")aprintf("\nsum(a) sums all the values of a...\n")sum(a)printf("\nprod(a) returns product of all values of a...\n")prod(a)printf("\nfloor(a) returns floor of all values of a...\n")floor(a)printf("\nceil(a) returns ceil of all values of a...\n")ceil(a)X = rand(3)Y = rand(3)printf("\nmax(X,Y) prints element wise max value among the two matrices...\n")max(X,Y)Mprintf("\nmax(M,[],1) prints column wise max value...\n")printf("max(M) also prints default column wise max value...\n")max(M,[],1)printf("\nmax(M,[],2) prints row wise max value...\n")max(M,[],2)printf("\nmax(max(M)) or max(M(:))prints the max value in the matrix...\n")max(M(:))printf("\nsum(M,1) prints column wise sum of matrix...\n")printf("sum(M) also prints default column wise sum of matrix...\n")sum(M,1)printf("\nsum(M,2) prints row wise sum of matrix...\n")sum(M,2)printf("\nsum(sum(M .* eye(3))) will result the principal diagonal sum of M...\n")sum(sum(M .* eye(3)))printf("\nflipud(eye(3)) will flip up-down the identity matrix...)\n")flipud(eye(3))printf("\nsum(sum(M .* flipud(eye(3)))) will result the sum of the inverse diagonal...\n")sum(sum(M .* flipud(eye(3))))printf("\npinv(M) will inverse matrix M...\n")pinv(M)